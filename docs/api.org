* API
** connect

=connect(ComponentClass:class, dataFlow:func [, props]):class=

=props= is *optional*, it will become default props of Component `connect` returned

example:
#+BEGIN_SRC js
    import {connect} from 'react-most'

    class TodoItem extends React.Component {
      ...
    }
    export default connect(TodoItem, function(intent$){
 intent$.filter(...).map(....)
...
})
#+END_SRC
** data flow
data flow is user define flow for intent stream, must return a object contains `actions` and `sinks`

#+BEGIN_SRC js
let RxCounter = connect(Counter, function(intent$){
  let defaultState$ = most.of(_=>({value:0}))
  let addSink$ = intent$.filter(x=>x.type=='add').map(({increment})=>state=>({value: state.value+increment}))
  return {
    add: increment=>({type: 'add', increment}),
    defaultState$,
    addSink$,
  }
});
#+END_SRC

`sinks` are Stream, `action` will be called whenever you wan to send something into Intent Stream.

** wrapper
wrapper wrap you App, so it can provide `actions`, and `setState` for you. new state will pass to you App via props. you don't have to care about state then, only to compose a clean data flow.
#+BEGIN_SRC html
import Most from 'react-most'
<Most>
  <Counter />
</Most>
#+END_SRC

*** change reactive engine [experimental]
if you are Rx user, optionally you can pass a =engine= props into =Most=.
#+BEGIN_SRC html
import Most from 'react-most'
<Most engine={function rxify() {
  let addToIntentStream = subject.onNext;
  let intentStream = new Rx.Subject();

  function flatObserve(intentSinks, f){
    return Rx.Observable.from(intentSinks).mergeAll().observe(f);
  }
  return {intentStream, addToIntentStream, flatObserve}
}}>
  <Counter />
</Most>
#+END_SRC

similarily, other reactive lib user can easily proivde you favor engine by simply provide these 3 things:
1. intentStream: a Steam contains values
2. addTodInentStream(value): a function that can add values into intentStream
3. flatObserve(sinks,func): flat Stream of Stream `sinks`, and observe with `func`.
